import bcrypt from 'bcryptjs';
import { User } from '../models/index.js';

/**
 * –°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 * @returns {Promise<void>}
 */
export const initAdminUser = async () => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        const adminExists = await User.findOne({ where: { role: 'admin' } });
        
        if (!adminExists) {
            // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            const salt = await bcrypt.genSalt(10);
            const hashedPassword = await bcrypt.hash('password_admin', salt);
            
            // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await User.create({
                email: 'admin@example.com',
                password: hashedPassword,
                fullName: 'Example Admin',
                phone: '+1234567890',
                role: 'admin'
            });
            
            console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω');
            console.log('üìß Email: admin@example.com');
            console.log('üîë –ü–∞—Ä–æ–ª—å: password_admin');
        } else {
            console.log('‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
    }
};
