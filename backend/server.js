import express from 'express';
import ejs from 'ejs';
import cookieParser from 'cookie-parser';
import session from 'express-session';
import flash from 'connect-flash';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';
import sequelize from './config/db.js';
import './models/index.js';
import { initAdminUser } from './seeders/initAdmin.js';
import authRouter from './routes/authRoutes.js';
import profileRouter from './routes/profileRoutes.js';
import adminRouter from './routes/adminRoutes.js';
import messageRouter from './routes/messageRoutes.js';
import ticketRouter from './routes/ticketRoutes.js';
import userRouter from './routes/userRoutes.js';
import { requireAuth } from './middleware/authMiddleware.js';
import { requireRole } from './middleware/roleMiddleware.js';
import { notFoundHandler, errorHandler } from './utils/errors.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// –ü–æ–ª—É—á–∞–µ–º __dirname –≤ ES –º–æ–¥—É–ª—è—Ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '../.env') });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–≤–∏–∂–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Middleware –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname, 'public')));

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
app.use(session({
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { 
        secure: process.env.NODE_ENV === 'production',
        maxAge: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
    }
}));

// Flash —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–π)
app.use(flash());

// –ü–µ—Ä–µ–¥–∞—á–∞ flash-—Å–æ–æ–±—â–µ–Ω–∏–π –≤ —à–∞–±–ª–æ–Ω—ã
app.use((req, res, next) => {
    res.locals.success_msg = req.flash('success_msg');
    res.locals.error_msg = req.flash('error_msg');
    res.locals.error = req.flash('error');
    res.locals.success = req.flash('success');
    res.locals.error = req.flash('error');
    res.locals.success = req.flash('success');
    res.locals.user = req.user || null;
    next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
const sessionConfig = {
    secret: process.env.SESSION_SECRET || 'your-secret-key',
    resave: false, 
    saveUninitialized: false, 
    cookie: { 
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'lax', 
        maxAge: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
    },
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∫—É–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    name: 'support-system.sid',
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ PostgreSQL
    store: process.env.NODE_ENV === 'production' ? (() => {
        const pg = require('pg');
        const pgSession = require('connect-pg-simple')(session);
        const pgPool = new pg.Pool({
            connectionString: process.env.DATABASE_URL
        });
        return new pgSession({
            pool: pgPool,
            tableName: 'user_sessions',
            createTableIfMissing: true
        });
    })() : undefined
};

// Session middleware - must be before routes
app.use(session(sessionConfig));
app.use(flash());

// Middleware –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏ –≤ res.locals
app.use((req, res, next) => {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏
    if (req.session && req.session.user) {
        // Create a clean user object without sensitive data
        const { password, ...userWithoutPassword } = req.session.user;
        res.locals.user = userWithoutPassword;
        res.locals.isAuthenticated = true;
        // Also set on req for API routes
        req.user = userWithoutPassword;
    } else {
        res.locals.user = null;
        res.locals.isAuthenticated = false;
        req.user = null;
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ flash-—Å–æ–æ–±—â–µ–Ω–∏–π
    res.locals.success = req.flash('success');
    res.locals.error = req.flash('error');
    
    next();
});

// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ PostgreSQL
if (process.env.NODE_ENV === 'production') {
    const pgSession = (await import('connect-pg-simple')).default;
    const pg = (await import('pg')).default;
    
    const pgPool = new pg.Pool({
        connectionString: process.env.DATABASE_URL
    });
    
    sessionConfig.store = new (pgSession(session))({
        pool: pgPool,
        tableName: 'user_sessions',
        createTableIfMissing: true
    });
}

app.use(session(sessionConfig));

// Flash —Å–æ–æ–±—â–µ–Ω–∏—è
app.use(flash());

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
app.use((req, res, next) => {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–ª–∞–≥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    res.locals.user = req.user || null;
    res.locals.isAuthenticated = !!req.user;
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ flash-—Å–æ–æ–±—â–µ–Ω–∏–π
    res.locals.success = req.flash('success');
    res.locals.error = req.flash('error');
    
    // –õ–æ–≥–∏—Ä—É–µ–º flash-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (res.locals.success && res.locals.success.length > 0) {
        console.log('Flash success:', res.locals.success);
    }
    if (res.locals.error && res.locals.error.length > 0) {
        console.log('Flash error:', res.locals.error);
    }
    
    next();
});

// –†–æ—É—Ç—ã
app.use('/auth', authRouter);
app.use('/profile', requireAuth, profileRouter);
app.use('/admin', [requireAuth, requireRole('admin')], adminRouter);
app.use('/messages', requireAuth, messageRouter);
app.use('/tickets', ticketRouter);
app.use('/users', userRouter);

// Root route
app.get('/', (req, res) => {
    const user = req.session.user || req.user;
    
    if (user) {
        // Redirect based on user role
        if (user.role === 'admin') {
            return res.redirect('/admin');
        } else {
            return res.redirect('/tickets');
        }
    }

    // For unauthenticated users, show the home page
    res.render('index', { 
        title: '–ì–ª–∞–≤–Ω–∞—è',
        user: null,
        isAuthenticated: false
    });
});

// –†–æ—É—Ç –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫
app.get('/home', requireAuth, (req, res) => {
    res.redirect('/tickets');
});

// –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/profile', requireAuth, (req, res) => {
    res.render('profile', {
        title: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å',
        user: req.user
    });
});

// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
app.get('/admin/dashboard', requireRole('admin'), (req, res) => {
    res.render('admin/dashboard', {
        title: '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
    res.status(404).render('error', {
        title: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
        message: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('Server error:', err.stack);
    res.status(500).render('error', {
        title: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
        error: process.env.NODE_ENV === 'development' ? err : {}
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
const checkDatabaseConnection = async () => {
    try {
        await sequelize.authenticate();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error);
        return false;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π —Å –ë–î
const syncDatabase = async () => {
    try {
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å alter, —Ç–∞–∫ –∫–∞–∫ SQLite –ø–ª–æ—Ö–æ —Å —ç—Ç–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ö–µ–º—ã
        await sequelize.sync({ force: false });
        console.log('‚úÖ –ú–æ–¥–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –ë–î');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π —Å –ë–î:', error);
        return false;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = () => {
    const PORT = process.env.PORT || 3000;
    return new Promise((resolve) => {
        const server = app.listen(PORT, () => {
            console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${PORT}`);
            resolve(server);
        });
    });
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
const initializeApp = async () => {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        const isDbConnected = await checkDatabaseConnection();
        if (!isDbConnected) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î');
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ —Å –ë–î
        const isDbSynced = await syncDatabase();
        if (!isDbSynced) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ —Å –ë–î');
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await initAdminUser();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        await startServer();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π
    }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–∫–∏
app.use(notFoundHandler);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
initializeApp();
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
});

process.on('uncaughtException', (error) => {
    console.error('‚ö†Ô∏è –ù–µ–ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–æ–º–æ—â—å—é PM2)
    process.exit(1);
});
